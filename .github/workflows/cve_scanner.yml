# This is a basic workflow to help you get started with Actions

name: CVE scanner

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  #push:
  #  branches: [ "main" ]
  #pull_request:
  #  branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  build_and_scan:
    runs-on: ubuntu-22.04
    steps:
      # Get date utility for caching database.
      - name: Get Date
        id: get-date
        run: |
          echo "date=$(/bin/date -u "+%Y%m%d")" >> $GITHUB_OUTPUT
        shell: bash
      # Let's first download dependencies for this action.
      #- uses: actions/checkout@v2
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.x'
      # This second step is unnecessary but highly recommended because
      # It will cache database and saves time redownloading it if database isn't stale.
      - name: get cached python packages
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      - name: get cached database
        uses: actions/cache@v3
        with:
          path: cache
          key: Linux-cve-bin-tool-${{ steps.get-date.outputs.date }}
      - name: Install CVE Binary Tool
        # We are using latest development version of CVE Binary Tool
        # because current PyPI version don't have features like config file support,
        # generating HTML report etc.
        run: |
          [[ -e cache ]] && mkdir -p .cache && mv cache ~/.cache/cve-bin-tool
          pip install git+https://github.com/intel/cve-bin-tool@v3.2.1
      # In case you prefer current PyPI version, you need to hard code CLI options
      # for cve-bin-tool in the action itself and have to use CSV or JSON as output format.
      # pip install cve-bin-tool
      - name: Create dependencies file
        run: echo '[{"vendor":"haxx","product":"libcurl","version":"7.60.0"},
                    {"vendor":"haxx","product":"curl","version":"7.60.0"},
                    {"vendor":"redhat","product":"bzip2","version":"1.0.8"},
                    {"vendor":"DaveGamble","product":"cJSON","version":"1.7.12"},
                    {"vendor":"python","product":"cPython","version":"3.9.9"},
                    {"vendor":"google","product":"GoogleTest","version":"1.11.0"},
                    {"vendor":"jemalloc","product":"jemalloc","version":"5.2.1"},
                    {"vendor":"libarchive","product":"libarchive","version":"3.5.1"},
                    {"vendor":"libdb","product":"libdb","version":"18.1.40"},
                    {"vendor":"libffi","product":"libffi","version":"3.2.1"},
                    {"vendor":"libpcre2","product":"libpcre2","version":"10.34"},
                    {"vendor":"libplist","product":"libplist","version":"2.2.0"},
                    {"vendor":"libYAML","product":"libYAML","version":"0.1.7"},
                    {"vendor":"audit-userspace","product":"audit-userspace","version":"2.8.4"},
                    {"vendor":"msgpack","product":"msgpack","version":"3.1.1"},
                    {"vendor":"nlohmann","product":"nlohmann","version":"3.7.3"},
                    {"vendor":"openssl","product":"openssl","version":"1.1.1l"},
                    {"vendor":"pacman","product":"pacman","version":"5.2.2"},
                    {"vendor":"popt","product":"popt","version":"1.16"},
                    {"vendor":"procps","product":"procps","version":"2.8.3"},
                    {"vendor":"redhat","product":"rpm","version":"4.16.1.3"},
                    {"vendor":"sqlite","product":"sqlite","version":"3.36.0"},
                    {"vendor":"zlib","product":"zlib","version":"1.2.11"}]' >> /tmp/external_dependencies.json
      - name: Scan packages
        # Here, we are scanning built wheel which is situated in /dist directory
        # Python stores built packages in /dist directory.
        # You need to replace it with the directory where you have stored built package
        run: cve-bin-tool --input-file /tmp/external_dependencies.json -f html -o cve-bin-tool-report.html
        # Alternatively if you have written config file for cve-bin-tool you can use following command
        # cve-bin-tool -C path/to/cve_bin_tool_config.toml
        continue-on-error: true
      # You need to set continue_on_error: true because CVE Binary Tool sets number of cves
      # as exit code. And GitHub terminates action when process produces
      # nonzero exit code status.
      - name: Upload report as an artifact
        # This will upload generated report as an GitHub artifact which you can download later.
        uses: actions/upload-artifact@v3
        with:
          name: cve_report
          path: 'cve-bin-tool-report.html'
